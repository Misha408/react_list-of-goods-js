{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_NAME","SORT_FIELD_LENGTH","App","useState","sortField","setSortField","isRev","setIsReversed","preparedGoods","goods","sort","good1","good2","length","localeCompare","reverse","getPreparedGoods","className","onClick","type","current","map","ReactDOM","render","document","getElementById"],"mappings":"iOAIaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAkB,OAClBC,EAAoB,SA0BnB,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA+BF,oBAAS,GAAxC,mBAAOG,EAAP,KAAcC,EAAd,KAEMC,EA3BR,SAA0BC,EAAOL,EAAWE,GAC1C,IAAME,EAAa,YAAOC,GAmB1B,OAjBAD,EAAcE,MAAK,SAACC,EAAOC,GACzB,OAAQR,GACN,KAAKH,EACH,OAAOU,EAAME,OAASD,EAAMC,OAE9B,KAAKb,EACH,OAAOW,EAAMG,cAAcF,GAE7B,QACE,OAAO,MAITN,GACFE,EAAcO,UAGTP,EAOeQ,CAAiBjB,EAAiBK,EAAWE,GAEnE,OACE,sBAAKW,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMb,EAAaL,IAC5BmB,KAAK,SACLF,UAAS,yBAAoBb,IAAcJ,GAAmB,YAHhE,iCAQA,wBACEmB,KAAK,SACLF,UAAS,4BAAuBb,IAAcH,GAAqB,YACnEiB,QAAS,kBAAMb,EAAaJ,IAH9B,4BAQA,wBACEiB,QAAS,kBAAMX,GAAc,SAAAa,GAAO,OAAKA,MACzCD,KAAK,SACLF,UAAS,4BArDQ,YAqDeb,GAAoC,YAHtE,sBAQEA,GAAaE,IACb,wBACEY,QAAS,WACPb,EAAa,IACbE,GAAc,IAEhBY,KAAK,SACLF,UAAU,4BANZ,sBAaJ,6BACGT,EAAca,KAAI,SAAAZ,GAAK,OACtB,oBAAI,UAAQ,OAAZ,SAAoBA,aC1F9Ba,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.521e9d59.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_NAME = 'name';\nconst SORT_FIELD_LENGTH = 'length';\nconst SORT_FIELD_REVERSE = 'reverse';\n\nfunction getPreparedGoods(goods, sortField, isRev) {\n  const preparedGoods = [...goods];\n\n  preparedGoods.sort((good1, good2) => {\n    switch (sortField) {\n      case SORT_FIELD_LENGTH:\n        return good1.length - good2.length;\n\n      case SORT_FIELD_NAME:\n        return good1.localeCompare(good2);\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isRev) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [isRev, setIsReversed] = useState(false);\n\n  const preparedGoods = getPreparedGoods(goodsFromServer, sortField, isRev);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SORT_FIELD_NAME)}\n          type=\"button\"\n          className={`button is-info ${sortField !== SORT_FIELD_NAME && 'is-light'}`}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-success ${sortField !== SORT_FIELD_LENGTH && 'is-light'}`}\n          onClick={() => setSortField(SORT_FIELD_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => setIsReversed(current => !current)}\n          type=\"button\"\n          className={`button is-warning ${sortField !== SORT_FIELD_REVERSE && 'is-light'}`}\n        >\n          Reverse\n        </button>\n\n        {(sortField || isRev) && (\n          <button\n            onClick={() => {\n              setSortField('');\n              setIsReversed(false);\n            }}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {preparedGoods.map(goods => (\n          <li data-cy=\"Good\">{goods}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}